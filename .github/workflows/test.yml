######touch /tmp/keepalive
name: test

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

env:
  PROJECT: 'immortalwrt'
  TARGET: 'x86_64'
  REPO_URL: 'https://github.com/immortalwrt/immortalwrt'
  REPO_BRANCH: 'openwrt-23.05'
  PLATFORM: 'amd64'
  SSH_DEBUG: 'true'
  SSH_TIME: '340'   #单位是分钟
  CCACHE: 'false'
  CLEAN: 'false'

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT


    - name: Clone source code
      run: |
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} ${{ env.PROJECT }}
        sudo chmod a+x $GITHUB_WORKSPACE/customize/diy/gogogo && sudo cp $GITHUB_WORKSPACE/customize/diy/gogogo /usr/bin/gogogo

    - name: Setup ssh for debug 
      if: env.SSH_DEBUG == 'true'
      continue-on-error: true  
      run: |
        # 允许root登录并设置root密码
        echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config 
        if [ -n "${{ secrets.SSH_PW }}" ]; then
          echo "root:${{ secrets.SSH_PW }}" | sudo chpasswd
        else
          echo "root:123" | sudo chpasswd
        fi
    
        # 重启SSH服务
        sudo service sshd restart
    
        # 配置和启动frpc
        if [ -n "${{ secrets.FRPC_CONFIG }}" ]; then
          # 使用提供的frpc配置
          echo "${{ secrets.FRPC_CONFIG }}" > ./frpc.ini
          chmod +x ./frpc && ./frpc -c ./frpc.ini &
          echo "================frpc启动成功!================"
          echo "=========检测为自定义配置,请自行连接ssh========="
          echo "true" > SSH_SETUP_SUCCESS.txt
        else
          # 生成随机端口并配置frpc
          max_attempts=10
          attempts=0

          while [ $attempts -lt $max_attempts ]; do
            random_port=$(shuf -i 10001-50000 -n 1)
            cp frpc.ini.example frpc.ini
            sed -i "s/\[ssh2action\]/\[ssh2action$random_port\]/g" frpc.ini
            sed -i "s/remote_port = 22222/remote_port = $random_port/g" frpc.ini
            chmod +x ./frpc && ./frpc -c ./frpc.ini > ./frpc.log 2>&1 &
            sleep 5
            # 检查frpc启动错误
            if grep -q "start proxy success" ./frpc.log; then
              echo "============frpc启动成功!============"
              echo "==========以下是SSH连接命令==========="
              echo "ssh root@$(grep -E 'server_addr\s*=' frpc.ini | cut -d'=' -f2 | tr -d '[:space:]') -p $random_port"
              echo "===================================="
              echo "true" > SSH_SETUP_SUCCESS.txt
              break
            else
              echo "错误：frpc启动失败!重试中..."
              pkill frpc
              attempts=$((attempts+1))
            fi
          done

          if [ $attempts -eq $max_attempts ]; then
              echo "警告：尝试启动frpc $max_attempts 次仍然失败。请自行配置FRPC_CONFIG字段"
              echo "flase" > SSH_SETUP_SUCCESS.txt
          fi
        fi

    - name: Pause workflow
      run: |
        SSH_SETUP_SUCCESS=$(<SSH_SETUP_SUCCESS.txt)
        if [ "$SSH_SETUP_SUCCESS" == 'true' ]; then
            count=0
            while [ ! -f /home/runner/stop_signal ] && [ $count -lt ${{ env.SSH_TIME }} ]; do
              echo -n -e "暂停工作流======已过时间：$count分钟 \033[0K\r"
              echo -n -e "可使用===gogogo===命令提前继续工作流 \033[0K\r"

              # 子循环
              inner_count=0
              while [ $inner_count -lt 60 ]; do
                if [ -f /home/runner/stop_signal ]; then
                  break  # 如果文件存在，立即退出子循环
                fi
                sleep 1
                inner_count=$((inner_count + 1))
              done
          
              count=$((count + 1))
            done
            # 循环结束后删除文件
            rm -f /home/runner/stop_signal
        else
          echo "frpc启动失败，终止工作流!"
          echo "frpc启动失败，终止工作流!"
          echo "frpc启动失败，终止工作流!"
          exit 1
        fi

    - name: Check compile
      id: compile
      run: |
        cd ${{ env.PROJECT }}/bin/targets/*/*
        if [ -n "$(ls *.img.gz)" ]; then
           echo "status=success" >> $GITHUB_OUTPUT
           echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
           echo "DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
           echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
           echo "===========编译成功,准备上传==========="
           echo "=============生成文件列表============="
           ls -lh | awk '{print $9, $5}'
           echo "==============清理文件中============="
           rm -rf packages *kernel.bin *rootfs* *.json *.tar.zst
           sleep 2
           echo "=============上传文件列表============="
           ls -lh | awk '{print $9, $5}'
           echo "===================================="
        else
          echo "===========编译失败,结束工作流==========="
          exit 1
        fi

    - name : Upload artifact
      uses: actions/upload-artifact@main
      if: always() && steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.PROJECT }}-firmware-${{ env.TARGET }}-${{ env.DATE }}
        path: ${{ env.FIRMWARE_PATH }} 
        retention-days: 2
