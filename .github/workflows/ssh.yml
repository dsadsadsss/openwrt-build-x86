######touch /tmp/keepalive
name: Build_ssh_debug

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

env:
  SSH_TIME: '5h'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set +e
        docker rmi `docker images -q`
        echo "Deleting files, please wait ..."
        sudo rm -rf \
          /usr/share/dotnet \
          /etc/mysql \
          /etc/php
        sudo -E apt-get -y purge \
          azure-cli \
          ghc* \
          zulu* \
          hhvm \
          llvm* \
          firefox \
          google* \
          dotnet* \
          powershell \
          openjdk* \
          mysql* \
          php*
        sudo -E apt-get update
        sudo -E apt-get -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean


    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH lede
        mv ./feeds/lede_feeds.conf.default ./lede/feeds.conf.default
        mv ./customize/lede_customize.sh ./lede/customize.sh
        chmod +x ./lede/customize.sh
       
    - name: Update & Install feeds
      working-directory: ./lede
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a
        ./customize.sh
    - name: Configuration Customization - Build_x86_64
      env:
        CONFIG_FILE: './config/lede_x86_64.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE lede/.config
        cd lede && make defconfig

    - name: setup ssh for debug 
      if: env.SSH_DEBUG == 'true'
      continue-on-error: true  # 允许失败但不终止工作流
      env:
        SSH_SETUP_SUCCESS: ${{ env.SSH_SETUP_SUCCESS }}
      run: |
        # 允许root登录并设置root密码
        echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config 
        if [ -n "${{ secrets.SSH_PW }}" ]; then
          echo "root:${{ secrets.SSH_PW }}" | sudo chpasswd
        else
          echo "root:123" | sudo chpasswd
        fi
    
        # 重启SSH服务
        sudo service sshd restart
    
        # 配置和启动frpc
        if [ -n "${{ secrets.FRPC_CONFIG }}" ]; then
          # 使用提供的frpc配置
          echo "${{ secrets.FRPC_CONFIG }}" > ./frpc.ini
          chmod +x ./frpc && ./frpc -c ./frpc.ini &
          echo "===============frpc启动成功!==============="
          echo "========检测为自定义配置,请自行连接ssh========"
          echo "true" > SSH_SETUP_SUCCESS.txt
        else
          # 生成随机端口并配置frpc
          max_attempts=10
          attempts=0

          while [ $attempts -lt $max_attempts ]; do
            random_port=$(shuf -i 10000-50000 -n 1)
            cp frpc.ini.example frpc.ini
            sed -i "s/\[ssh2action\]/\[ssh2action$random_port\]/g" frpc.ini
            sed -i "s/remote_port = 22222/remote_port = $random_port/g" frpc.ini
            chmod +x ./frpc && ./frpc -c ./frpc.ini > ./frpc.log 2>&1 &
            sleep 5
            # 检查frpc启动错误
            if grep -q "start proxy success" ./frpc.log; then
              echo "===========frpc启动成功!=========="
              echo "=========以下是SSH连接命令========="
              echo "ssh root@$(grep -E 'server_addr\s*=' frpc.ini | cut -d'=' -f2 | tr -d '[:space:]') -p $random_port"
              echo "true" > SSH_SETUP_SUCCESS.txt
              break
            else
              echo "错误：frpc启动失败!重试中..."
              pkill frpc
              attempts=$((attempts+1))
            fi
          done

          if [ $attempts -eq $max_attempts ]; then
              echo "警告：尝试启动frpc $max_attempts 次仍然失败。请自行配置FRPC_CONFIG字段"
              echo "flase" > SSH_SETUP_SUCCESS.txt
          fi
        fi
        
    - name: suspend
      run: |
        SSH_SETUP_SUCCESS=$(<SSH_SETUP_SUCCESS.txt)
        if [ "$SSH_SETUP_SUCCESS" == 'true' ]; then
          echo "${{ env.SSH_TIME }}后,将继续进行工作流"
          sleep ${{ env.SSH_TIME }}
          echo "${{ env.SSH_TIME }}时间结束,继续进行工作流"
        else
          echo "frpc启动失败，跳过 suspend 步骤"
        fi
        
    - name : Upload artifact
      uses: actions/upload-artifact@master
      continue-on-error: true
      with:
        name: lede
        path: lede/bin/targets/
     
    - name : disk space check
      run: df -h
      continue-on-error: true 
