name: LEDE_x86_64

# Add a button to trigger the workflow
on: 
  repository_dispatch:
  workflow_dispatch:

env:
  PROJECT: 'lede'
  TARGET: 'x86_64'
  REPO_URL: 'https://github.com/coolsnowwolf/lede'
  REPO_BRANCH: 'master'
  PLATFORM: 'amd64'
  SSH_DEBUG: 'false'
  SSH_TIME: '30m'
  SSH_TIME2: '2h'
  CCACHE: 'true'
  CLEAN: 'false'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Check Server Performance
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673\n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量: $(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo "CPU核心数量: $(nproc)"
        echo -e "CPU型号信息:$(cat /proc/cpuinfo | grep -m1 name | awk -F: '{print $2}')\n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息:"
        echo -e "$(sudo lshw -short -C memory | grep GiB)\n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi `docker images -q`
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-mark hold grub-efi-amd64-signed
        sudo -E apt update
        sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
        sudo -E apt -y full-upgrade
        sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libc6-dev libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
        sudo -E systemctl daemon-reload
        sudo -E apt -y autoremove --purge
        sudo -E apt clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    - name: Clone source code
      run: |
        git clone --depth 1 ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} ${{ env.PROJECT }}

    - name: Cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: ${{ env.CCACHE }}
        mixkey: ${{ env.PROJECT }}_${{ env.TARGET }}_${{ env.REPO_BRANCH }}
        clean: ${{ env.CLEAN }}
        prefix: ${{ github.workspace }}/${{ env.PROJECT }}
        
    - name: Update & Install feeds
      working-directory: ./${{ env.PROJECT }}
      run: |
        mv $GITHUB_WORKSPACE/feeds/${{ env.PROJECT }}_${{ env.TARGET }} $GITHUB_WORKSPACE/${{ env.PROJECT }}/feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        ./scripts/feeds install -a

    - name: "Configuration Customization - Build_${{ env.PROJECT }}_${{ env.TARGET }}"
      env:
        CONFIG_FILE: './config/${{ env.PROJECT }}_${{ env.TARGET }}.config'
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ${{ env.PROJECT }}/.config
        chmod +x $GITHUB_WORKSPACE/customize/*.sh
        cd ${{ env.PROJECT }}
        $GITHUB_WORKSPACE/customize/${{ env.PROJECT }}_${{ env.TARGET }}.sh
        $GITHUB_WORKSPACE/customize/preset-adguard-core.sh ${{ env.PLATFORM }}
        $GITHUB_WORKSPACE/customize/preset-clash-core.sh ${{ env.PLATFORM }}
        sudo echo "cd $PWD" >> /home/runner/.bashrc
        [ "${{ env.CCACHE }}" == 'true' ] && echo -e 'CONFIG_CCACHE=y' >> .config
        make defconfig

    - name: Setup ssh for debug 
      if: env.SSH_DEBUG == 'true'
      continue-on-error: true
      run: |
        # 允许root登录并设置root密码
        echo "PermitRootLogin yes" | sudo tee -a /etc/ssh/sshd_config 
        if [ -n "${{ secrets.SSH_PW }}" ]; then
          echo "root:${{ secrets.SSH_PW }}" | sudo chpasswd
        else
          echo "root:123" | sudo chpasswd
        fi
    
        # 重启SSH服务
        sudo service sshd restart
    
        # 配置和启动frpc
        if [ -n "${{ secrets.FRPC_CONFIG }}" ]; then
          # 使用提供的frpc配置
          echo "${{ secrets.FRPC_CONFIG }}" > ./frpc.ini
          chmod +x ./frpc && ./frpc -c ./frpc.ini &
          echo "================frpc启动成功!================"
          echo "=========检测为自定义配置,请自行连接ssh========="
          echo "true" > SSH_SETUP_SUCCESS.txt
        else
          # 生成随机端口并配置frpc
          max_attempts=10
          attempts=0

          while [ $attempts -lt $max_attempts ]; do
            random_port=$(shuf -i 10001-50000 -n 1)
            cp frpc.ini.example frpc.ini
            sed -i "s/\[ssh2action\]/\[ssh2action$random_port\]/g" frpc.ini
            sed -i "s/remote_port = 22222/remote_port = $random_port/g" frpc.ini
            chmod +x ./frpc && ./frpc -c ./frpc.ini > ./frpc.log 2>&1 &
            sleep 5
            # 检查frpc启动错误
            if grep -q "start proxy success" ./frpc.log; then
              echo "============frpc启动成功!==========="
              echo "==========以下是SSH连接命令=========="
              echo "ssh root@$(grep -E 'server_addr\s*=' frpc.ini | cut -d'=' -f2 | tr -d '[:space:]') -p $random_port"
              echo "===================================="
              echo "true" > SSH_SETUP_SUCCESS.txt
              break
            else
              echo "错误：frpc启动失败!重试中..."
              pkill frpc
              attempts=$((attempts+1))
            fi
          done

          if [ $attempts -eq $max_attempts ]; then
              echo "警告：尝试启动frpc $max_attempts 次仍然失败。请自行配置FRPC_CONFIG字段"
              echo "false" > SSH_SETUP_SUCCESS.txt
          fi
        fi
        
    - name: Suspend for custom
      if: env.SSH_DEBUG == 'true'
      run: |
        SSH_SETUP_SUCCESS=$(<SSH_SETUP_SUCCESS.txt)
        if [ "$SSH_SETUP_SUCCESS" == 'true' ]; then
          echo "暂停工作流,${{ env.SSH_TIME }}后将继续进行工作流.可使用pkill sleep命令提前继续工作流"
          sleep ${{ env.SSH_TIME }}
          echo "时间结束,继续进行工作流"
        else
          echo "frpc启动失败，跳过 suspend 步骤"
        fi
        
    - name: Download package
      if: always()
      working-directory: ./${{ env.PROJECT }}
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        df -h

    - name: Build firmware
      working-directory: ./${{ env.PROJECT }}
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s || make -j1 V=s | tee build.log
        df -h

    - name: Suspend for debug
      if: failure()
      run: |
        SSH_SETUP_SUCCESS=$(<SSH_SETUP_SUCCESS.txt)
        if [ "$SSH_SETUP_SUCCESS" == 'true' ]; then
          echo "检测到编译失败,将暂停工作流${{ env.SSH_TIME2 }}以进行debug调试.调试完成后可使用pkill sleep命令提前继续工作流"
          sleep ${{ env.SSH_TIME2 }}
          echo "时间结束,继续进行工作流"
        else
          echo "检测到编译失败,但frpc未启动，跳过 debug 步骤"
        fi

    - name: Check compile
      if: always()
      id: compile
      run: |
        cd ${{ env.PROJECT }}/bin/targets/*/*
        if [ -n "$(ls *.img.gz)" ]; then
           echo "===========编译成功,准备上传==========="
           echo "=============生成文件列表============="
           echo "$(ls *.img.gz)"
           echo "===================================="
           rm -rf packages *kernel.bin *rootfs.img.gz *.json version.buildinfo
           echo "=============上传文件列表============="
           echo "$(ls *.img.gz)"
           echo "===================================="
           echo "status=success" >> $GITHUB_OUTPUT
           echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
           echo "DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        else
          echo "===========编译失败,结束工作流==========="
          exit 1
        fi

    - name : Upload artifact
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.PROJECT }}-firmware-${{ env.TARGET }}-${{ env.DATE }}
        path: ${{ env.FIRMWARE_PATH }} 
